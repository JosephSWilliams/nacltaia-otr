nacltaia-otr:
  provides authenticated and encrypted messages
  and protects recepients from forgeries, replay
  attacks, and other shenannigans through the
  protocol of IRC in a chroot environment.

  the chosen primitives for PM are:

  taia64 + curve25519xsalsa20poly1305 + base91a

  the selected primitives provide authenticated,
  encrypted messages from a sender (seckey), to
  a receiver (pubkey). the protocol protects
  receivers from forgeries and replay attacks.

  the chosen primitives for CHAT are:

  taia64 + crypto_secretbox_xsalsa20poly1305 + base91a

  the selected primitives provide authenticated,
  encrypted messages for senders to receivers
  with a shared seckey. the protocol provides
  that only receivers with the shared seckey
  can view the plaintext of a message.

  IMHO PM/CHAT messages are usually between 0 and 128
  bytes length. nacltaia-otr automatically pads each
  message in 128 byte blocks. in example, the messages
  "Hi, :-)" and "How are you?" will result in the same
  size 128 byte ciphertext. messages greater than 128
  bytes will be padded to meet the full 128 byte block.
  the tradeoff here is a small additional overhead for
  considerably stronger security.

  before nacltaia-otr begins handling incoming and
  outgoing remote data, it locks itself into a chroot
  jail and throws aways the key. this isn't just an
  option for security, it's the only way to run
  nacltaia-otr.

  the chosen encryption schemes of nacltaia-otr will
  never violate your repudiability. sending ciphertext
  through nacltaia-otr cannot substantiate a sender as
  the source of a message anymore than sending the same
  message in plaintext. it does this while still
  preventing third-party forgeries.

  IRC messages may often contain binary encoding. this
  can allow an attacker to tamper with internal
  mechanisms in some IRC clients, often without the
  user's knowledge. in worst cases it can even allow
  an attacker to execute arbitrary code on the victim's
  machine. nacltaia-otr automatically purges all binary
  encoding before it makes it to the IRC client.

  nacltaia-otr provides perfect forward secrecy through
  the use of session keys. this maintains that even if
  your private key is compromised, no previous message
  can be decrypted.

thanks:
  much thanks to Ivo Smits for help with 64bit
  platforms and valuable insight on some strange
  functionalities of the IRC protocol.

  most of the hardwork for writing nacltaia.so module
  was already done by Jan Mojzis in python-nacl*.

  much thanks to talamon, a friend willing to help
  get to the bottom of amd64 issues through trial
  and error.

depends:
  python(>=2.6), python-dev(>=2.6), nacl, libtai,
  gcc, sh

recommends:
  cython(>=0.17.3), ucspi-tcp, urcd

todo:
  fixes for pfs multiserver shared keys

amd64:
  # i've included some preinstall scripts to
  # workaround the taia and nacl issues with
  # shared objects on 64bit architectures.

  ./libtai-amd64.sh
  ./nacl-amd64.sh

install:

  useradd nacltaia-otr

  # python2.6
  ./Make.sh

  # python2.7
  sed 's/\.6/.7/g' Make.sh | sh

  mkdir -p crypto/
  mkdir -p crypto/sign/
  mkdir -p crypto/unsign/
  mkdir -p crypto/tmpkey/
  mkdir -p crypto/dstkey/
  mkdir -p crypto/chnkey/

  ./keypair

  printf $pubkey > crypto/pubkey
  printf $seckey > crypto/seckey

  chown nacltaia-otr crypto/ -R

adding crypto:
  # [security] $nick should be lowercase

  mkdir -p crypto/dstkey/
  mkdir -p crypto/tmpkey/$nick

  printf $pubkey > crypto/dstkey/$nick

  ./newsessiongen crypto/

  chmod 777 crypto/ -R
  chown nacltaia-otr crypto/ -R

  # [security] $channel should be lowercase
  # with no hashtag. $nick should be
  # lowercase

  ./seckey

  mkdir -p crypto/dstkey/
  mkdir -p crypto/tmpkey/$nick

  printf $seckey > crypto/chnkey/$channel

  chmod 777 crypto/ -R
  chown nacltaia-otr crypto/ -R

adding signatures:
  # WARNING: crypto_sign does not provide repudiation
  # [security] $nick and $channel should be lowercase
  # with no hashtag

  # signing channel messages:
    ./sign_keypair

    mkdir -p crypto/sign/$channel

    printf $pubkey > crypto/sign/$channel/pubkey
    printf $seckey > crypto/sign/$channel/seckey

    chmod 777 crypto/ -R
    chown nacltaia-otr crypto/ -R

  # enforcing remote signatures:

    mkdir -p crypto/unsign/$channel

    printf $pubkey > crypto/unsign/$channel/$nick

    chmod 777 crypto/ -R
    chown nacltaia-otr crypto/ -R

perfect forward secrecy:

  # you should generate new session keys in a timely
  # manner. crypto_box_keypair should be in the cwd.

  ./newsessiongen crypto/

  # you can daemonize this if you prefer. newsessiongen
  # accepts a second argument for intervals. an example
  # of generating new session keys every 8 minutes.

  while true ; do
    ./newsession crypto/ 512
  done

urcd:
  # from cwd of urcd

  ln -s /path/to/nacltaia-otr/stdin `pwd`/stdin
  ln -s /path/to/nacltaia-otr/stdout `pwd`/stdout
  ln -s /path/to/nacltaia-otr/crypto `pwd`/crypto
  ln -s /path/to/nacltaia-otr/base91a.so `pwd`/base91a.so
  ln -s /path/to/nacltaia-otr/nacltaia.so `pwd`/nacltaia.so

ucspi-tcp:
  tcpserver 127.0.0.1 6667 tcpclient irc.crypto.net 6667 ./stdio &
  irssi -c 127.0.0.1

ucspi-tcp (tor):
  tcpserver 127.0.0.1 6667 tcpclient 127.0.0.1 9050 ./ucspi-socks4aclient irc.crypto.net 6667 ./stdio &
  irssi -c 127.0.0.1
