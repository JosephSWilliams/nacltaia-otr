nacltaia-otr:
  provides authenticated and encrypted messages
  and protects recepients from forgeries, replay
  attacks, and other shenannigans through the
  protocol of IRC in a chroot environment.

  the chosen primitives for PM are:

  taia64 + curve25519xsalsa20poly1305 + base91a

  the selected primitives provide authenticated,
  encrypted messages from a sender (seckey), to
  a receiver (pubkey). the protocol protects
  receivers from forgeries and replay attacks.

  the chosen primitives for CHAT are:

  taia64 + crypto_secretbox_xsalsa20poly1305 + base91a

  the selected primitives provide authenticated,
  encrypted messages for senders to receivers
  with a shared seckey. the protocol provides
  that only receivers with the shared seckey
  can view the plaintext of a message.

  IMHO PM/CHAT messages are usually between 0 and 256
  bytes length. nacltaia-otr automatically pads each
  message in 256 byte blocks. in example, the messages
  "Hi, :-)" and "How are you?" will result in the same
  size 256 byte ciphertext. messages greater than 256
  bytes will be padded to meet the full 256 byte block.
  the tradeoff here is a small additional overhead for
  considerably stronger security.

  before nacltaia-otr begins handling incoming and
  outgoing remote data, it locks itself into a chroot
  jail and throws aways the key. this isn't just an
  option for security, it's the only way to run
  nacltaia-otr.

  the chosen encryption schemes of nacltaia-otr will
  never violate your repudiability. sending ciphertext
  through nacltaia-otr cannot substantiate a sender as
  the source of a message anymore than sending the same
  message in plaintext. it does this while still
  preventing third-party forgeries. this feature is
  extended for non-signed messages only. signatures are
  not used by default with any nacltaia-otr encryption.

  IRC messages may often contain binary encoding. this
  can allow an attacker to tamper with internal
  mechanisms in some IRC clients, often without the
  user's knowledge. in worst cases it can even allow
  an attacker to execute arbitrary code on the victim's
  machine. nacltaia-otr automatically purges all binary
  encoding before it makes it to the IRC client.

  PM over nacltaia-otr provides perfect forward secrecy
  through the use of session keys. this maintains that
  even if your private key is compromised, no previous
  message can be decrypted.

  nacltaia-otr has no handshakes or acknowledgements.
  when you receive a new session key from a friend or
  a signature during chat nacltaia-otr stays silent.
  when sending a new session key or signature the
  new keys are populated through natural traffic. this
  provides that nacltaia-otr will never leak your
  precense or uptime statistics as long as your IRC
  server of choice doesn't announce this information.
  if your friend changes session keys before your
  nacltaia-otr knows, they will receive a message
  from CryptoServ!nacltaia-otr@service. they can
  simply request you resend your message.

  nacltaia-otr has no builtin methods for logging. if
  your IRC client of choice doesn't write logs to HDD
  you don't have to worry about removing or shredding
  previous messages from your contacts.

thanks:
  much thanks to Ivo Smits for help with 64bit
  platforms and valuable insight on some strange
  functionalities of the IRC protocol.

  most of the hardwork for writing nacltaia.so module
  was already done by Jan Mojzis in python-nacl*.

  much thanks to talamon, a friend willing to help
  get to the bottom of amd64 issues through trial
  and error.

todo:
  think of something to do

depends:
  python(>=2.6), python-dev(>=2.6), nacl, libtai,
  gcc, sh

recommends:
  cython(>=0.18.0), ucspi-tcp, urcd

install:

  # necessary for 64 bit architectures
  ./install-libtai.sh
  ./install-nacl.sh

  useradd nacltaia-otr

  # python2.6
  ./Make.sh

  # python2.7
  sed 's/\.6/.7/g' Make.sh | sh

  mkdir -p crypto/
  mkdir -p crypto/sign/
  mkdir -p crypto/unsign/
  mkdir -p crypto/tmpkey/
  mkdir -p crypto/dstkey/
  mkdir -p crypto/chnkey/

  ./keypair

  printf $pubkey > crypto/pubkey
  printf $seckey > crypto/seckey

  ./touchcrypto crypto/

adding crypto:
  # [security] $nick should be lowercase

  mkdir -p crypto/dstkey/
  mkdir -p crypto/tmpkey/$nick

  printf $pubkey > crypto/dstkey/$nick

  ./touchcrypto crypto/

  # [security] $channel should be lowercase
  # with no hashtag. $nick should be
  # lowercase

  ./seckey

  printf $seckey > crypto/chnkey/$channel

  ./touchcrypto crypto/

adding signatures:
  # WARNING: crypto_sign does not provide repudiation
  # [security] $nick and $channel should be lowercase
  # with no hashtag

  # signing channel messages:
    ./sign_keypair

    mkdir -p crypto/sign/$channel

    printf $pubkey > crypto/sign/$channel/pubkey
    printf $seckey > crypto/sign/$channel/seckey

  # enforcing remote signatures:

    mkdir -p crypto/unsign/$channel

    printf $pubkey > crypto/unsign/$channel/$nick

    ./touchcrypto crypto/

perfect forward secrecy:

  # you should generate new session keys in a timely
  # manner. crypto_box_keypair should be in the cwd.

  ./newsessiongen crypto/

  # you can daemonize this if you prefer. newsessiongen
  # accepts a second argument for intervals. an example
  # of generating new session keys every 8 minutes.

  while true ; do
    ./newsession crypto/ 512
  done

urcd:
  # from cwd of urcd

  ln -s /path/to/nacltaia-otr/stdin `pwd`/stdin
  ln -s /path/to/nacltaia-otr/stdout `pwd`/stdout
  ln -s /path/to/nacltaia-otr/crypto `pwd`/crypto
  ln -s /path/to/nacltaia-otr/base91a.so `pwd`/base91a.so
  ln -s /path/to/nacltaia-otr/nacltaia.so `pwd`/nacltaia.so

ucspi-tcp:
  tcpserver 127.0.0.1 6667 tcpclient irc.crypto.net 6667 ./stdio &
  irssi -c 127.0.0.1

ucspi-tcp (tor):
  tcpserver 127.0.0.1 6667 tcpclient 127.0.0.1 9050 ./ucspi-socks4aclient irc.crypto.net 6667 ./stdio &
  irssi -c 127.0.0.1

curvecp:
  tcpserver 127.0.0.1 6667 curvecpclient irc.crypto.net $pubkey 1.1.5.67 6667 $extension curvecpmessage -c ./stdio &
  irssi -c 127.0.0.1
